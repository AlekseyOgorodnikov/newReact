{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","eventObject","currentTarget","value","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","UserPhoto","alt","contacts","vk","Preloader","Post","item","message","likesCount","MyPosts","React","memo","postsElement","posts","reverse","map","id","likeCounts","key","postsBlock","AddPostFormRedux","onSubmit","values","addPost","newPostText","maxLenght10","maxLengthCreatore","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.324fa9d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"top_img\":\"ProfileInfo_top_img__jGkeG\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2NdD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Q1g_\",\"button\":\"MyPosts_button__32hLO\",\"posts\":\"MyPosts_posts__TJoQT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2tZci\"};","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  //array two elements\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  //изменения в локальном state\r\n  const onStatusChange = (eventObject) => {\r\n    setStatus(eventObject.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateMode}>{props.status || \"-------\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport UserPhoto from \"../../../assets/images/avatar.png\";\r\n\r\nfunction ProfileInfo(props) {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <img\r\n          src={\r\n            props.profile.photos.large != null\r\n              ? props.profile.photos.large\r\n              : UserPhoto\r\n          }\r\n          alt=\"AVATAR\"\r\n        />\r\n        <span>VK : </span>\r\n        {props.profile.contacts.vk}\r\n        <ProfileStatusWithHooks\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nfunction Post(props) {\r\n    return (\r\n    <div className={classes.item}>\r\n      <img src=\"https://www.meme-arsenal.com/memes/64778250478209d48c5dbc733a3256b0.jpg\" alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span className=\"like\">Like {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  required,\r\n  maxLengthCreatore,\r\n} from \"../../../utills/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  // React.memo делает отрисовку один раз, пока нет изменений в State\r\n  // PureComponent делае тоже самое без проверок\r\n  // Проверка на рендеринг, для простого и быстрострого отображения в один рендер\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return nextProps !== this.props || nextState !== this.state;\r\n  // }\r\n  //clean function-copy post warrning\r\n  let postsElement = [...props.posts].reverse().map((posts, id) => {\r\n    return (\r\n      <Post likesCount={posts.likeCounts} message={posts.message} key={id} />\r\n    );\r\n  });\r\n\r\n  const addNewPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.postsBlock}>\r\n      <h3>Мои посты</h3>\r\n      <AddPostFormRedux onSubmit={addNewPost} />\r\n      <div className={classes.posts}>{postsElement}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst maxLenght10 = maxLengthCreatore(10);\r\n\r\nconst AddPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Поделиться новостью\"\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          validate={[required, maxLenght10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Отправить</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst AddPostFormRedux = reduxForm({ form: \"profileAddPostForm\" })(AddPostForm);\r\n\r\nexport default MyPosts;\r\n","import { addPostActionCreator } from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsMessage = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToPropsMessage = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(\r\n  mapStateToPropsMessage,\r\n  mapDispatchToPropsMessage\r\n)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nfunction Profile(props) {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n} from \"../../Redux/profileReducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}